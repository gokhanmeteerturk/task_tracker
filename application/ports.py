from typing import Protocol, List, Optional, Dict
from domain.models import Platform, Goal, Task, Account, TaskLog

# --- Basically all the ports for persistence etc ---
class IPlatformRepository(Protocol):
    def save(self, platform: Platform) -> None: ...
    def get_by_id(self, platform_id: int) -> Optional[Platform]: ...
    def list_all(self) -> List[Platform]: ...

class IAccountRepository(Protocol):
    def save(self, account: Account) -> None: ...
    def get_by_id(self, account_id: int) -> Optional[Account]: ...
    def list_by_platform(self, platform_id: int) -> List[Account]: ...
    def delete(self, account_id: int) -> None: ...
    def get_dashboard_summary(self) -> List[Dict]: ...

class ITaskLogRepository(Protocol):
    def save(self, log: TaskLog) -> None: ...
    def list_by_task_id(self, task_id: int) -> List[TaskLog]: ...

class IGoalRepository(Protocol):
    def save(self, goal: Goal) -> None: ...
    def get_by_id(self, goal_id: int) -> Optional[Goal]: ...
    def list_all(self) -> List[Goal]: ...
    def update(self, goal: Goal) -> None: ...
    def delete(self, goal_id: int) -> None: ...

class ITaskRepository(Protocol):
    def save(self, task: Task) -> None: ...
    def get_by_id(self, task_id: int) -> Optional[Task]: ...
    def list_all(self) -> List[Task]: ...
    def find_latest_for_goal(self, goal_id: int, account_id: Optional[int]) -> Optional[Task]: ...
    def find_latest_for_goal_any_account(self, goal_id: int) -> Optional[Task]: ...
    def count_completed_for_goal(self, goal_id: int, account_ids: Optional[List[int]]) -> int: ...
